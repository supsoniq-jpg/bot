import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–ª–≥–µ–±—Ä–∞"), KeyboardButton(text="–ì–µ–æ–º–µ—Ç—Ä–∏—è")],
        [KeyboardButton(text="–¢–µ—Å—Ç—ã"), KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

category_folders = {
    "–ê–ª–≥–µ–±—Ä–∞": "algebra",
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "geometry",
    "–¢–µ—Å—Ç—ã": "tests",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": "support"
}

topics_files = {
    "–ê–ª–≥–µ–±—Ä–∞": {
        "–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è": "rational_expressions.txt",
        "–§—É–Ω–∫—Ü–∏–∏": "functions.txt",
        "–î—Ä–æ–±–Ω–æ-—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞": "fractional_expressions.txt",
        "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏": "progressions.txt"
    },
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è": {
        "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ": "right_triangle.txt",
        "–í–ø–∏—Å–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏": "circles.txt",
        "–¢–µ–æ—Ä–µ–º–∞ —Å–∏–Ω—É—Å–æ–≤, —Ç–µ–æ—Ä–µ–º–∞ –∫–æ—Å–∏–Ω—É—Å–æ–≤": "sine_cosine_heron.txt",
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∏": "polygons.txt"
    },
    "–¢–µ—Å—Ç—ã": {
        "–¢–µ—Å—Ç—ã –ø–æ –∞–ª–≥–µ–±—Ä–µ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏": "tests.txt"
    },
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": {
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã": "support.txt"
    }
}

def get_topic_menu(category_ru):
    topics = list(topics_files.get(category_ru, {}).keys())
    buttons = [[KeyboardButton(text=topic)] for topic in topics]
    buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_topic_text(category_ru, topic_name):
    if category_ru in topics_files and topic_name in topics_files[category_ru]:
        folder = category_folders[category_ru]
        filename = topics_files[category_ru][topic_name]
        path = os.path.join("topics", folder, filename)
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    return content
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ " + folder
    return "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

MAX_MESSAGE_LENGTH = 4000  

async def send_long_message(message: types.Message, text: str):
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        await message.answer(text[i:i+MAX_MESSAGE_LENGTH])

@dp.message()
async def handle_message(message: types.Message):
    text = message.text

    if text == "/start":
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üòä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç!\n"
            "–ì–æ—Ç–æ–≤ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –º–æ–∑–≥? üí°\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏ –ø–æ–µ—Ö–∞–ª–∏!",
            reply_markup=main_menu
        )
        return

    if text == "–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        return

    if text in category_folders:
        menu = get_topic_menu(text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=menu)
        return

    for category_ru in topics_files:
        if text in topics_files[category_ru]:
            content = get_topic_text(category_ru, text)
            await send_long_message(message, content)
            return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())